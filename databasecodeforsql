-- Create database
CREATE DATABASE IF NOT EXISTS dashboard_db;
USE dashboard_db;

-- Create users table
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL,
    role ENUM('admin', 'user') DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE INDEX idx_username (username),
    UNIQUE INDEX idx_email (email)
);

-- Create pop_data table
CREATE TABLE pop_data (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    sex ENUM('Male', 'Female', 'LGBTQ') NOT NULL,
    barangay VARCHAR(100) NOT NULL,
    address TEXT NOT NULL,
    contact VARCHAR(50),
    birthday DATE NOT NULL,
    added_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (added_by) REFERENCES users(user_id) ON DELETE SET NULL,
    INDEX idx_barangay (barangay),
    INDEX idx_added_by (added_by)
);

-- Create events table
CREATE TABLE events (
    event_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    event_date DATE NOT NULL,
    event_time TIME NOT NULL,
    location VARCHAR(255) NOT NULL,
    barangay VARCHAR(100) NOT NULL,
    organizer_id INT,
    status ENUM('upcoming', 'ongoing', 'completed', 'cancelled') DEFAULT 'upcoming',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (organizer_id) REFERENCES users(user_id) ON DELETE SET NULL,
    INDEX idx_event_date (event_date),
    INDEX idx_barangay (barangay)
);

-- Create activity_logs table
CREATE TABLE activity_logs (
    log_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    action VARCHAR(50) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL,
    INDEX idx_user_action (user_id, action)
);

-- Create barangay_stats table
CREATE TABLE barangay_stats (
    stat_id INT PRIMARY KEY AUTO_INCREMENT,
    barangay VARCHAR(100) NOT NULL,
    total_population INT DEFAULT 0,
    male_count INT DEFAULT 0,
    female_count INT DEFAULT 0,
    lgbtq_count INT DEFAULT 0,
    youth_count INT DEFAULT 0,
    adult_count INT DEFAULT 0,
    senior_count INT DEFAULT 0,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE INDEX idx_barangay (barangay)
);

-- Create user_settings table
CREATE TABLE user_settings (
    setting_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    theme VARCHAR(20) DEFAULT 'light',
    notifications BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE INDEX idx_user_settings (user_id)
);

-- Create settings table
CREATE TABLE settings (
    setting_id INT PRIMARY KEY AUTO_INCREMENT,
    setting_key VARCHAR(50) NOT NULL,
    setting_value TEXT,
    description TEXT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE INDEX idx_setting_key (setting_key)
);

-- Create stored procedures
DELIMITER //

-- Add new resident
CREATE PROCEDURE sp_add_resident(
    IN p_name VARCHAR(100),
    IN p_age INT,
    IN p_sex ENUM('Male', 'Female', 'LGBTQ'),
    IN p_barangay VARCHAR(100),
    IN p_address TEXT,
    IN p_contact VARCHAR(50),
    IN p_birthday DATE,
    IN p_added_by INT
)
BEGIN
    INSERT INTO pop_data (name, age, sex, barangay, address, contact, birthday, added_by)
    VALUES (p_name, p_age, p_sex, p_barangay, p_address, p_contact, p_birthday, p_added_by);
    
    -- Log activity
    INSERT INTO activity_logs (user_id, action, description)
    VALUES (p_added_by, 'ADD_RESIDENT', CONCAT('Added new resident: ', p_name));
END //

-- Update barangay statistics
CREATE PROCEDURE sp_update_barangay_stats()
BEGIN
    INSERT INTO barangay_stats (
        barangay, 
        total_population, 
        male_count, 
        female_count,
        lgbtq_count,
        youth_count,
        adult_count,
        senior_count
    )
    SELECT 
        barangay,
        COUNT(*) as total,
        SUM(CASE WHEN sex = 'Male' THEN 1 ELSE 0 END),
        SUM(CASE WHEN sex = 'Female' THEN 1 ELSE 0 END),
        SUM(CASE WHEN sex = 'LGBTQ' THEN 1 ELSE 0 END),
        SUM(CASE WHEN age BETWEEN 18 AND 30 THEN 1 ELSE 0 END),
        SUM(CASE WHEN age BETWEEN 31 AND 59 THEN 1 ELSE 0 END),
        SUM(CASE WHEN age >= 60 THEN 1 ELSE 0 END)
    FROM pop_data
    GROUP BY barangay
    ON DUPLICATE KEY UPDATE
        total_population = VALUES(total_population),
        male_count = VALUES(male_count),
        female_count = VALUES(female_count),
        lgbtq_count = VALUES(lgbtq_count),
        youth_count = VALUES(youth_count),
        adult_count = VALUES(adult_count),
        senior_count = VALUES(senior_count);
END //

DELIMITER ;

-- Create event to update statistics daily
CREATE EVENT evt_daily_stats_update
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
    CALL sp_update_barangay_stats();

-- Insert default settings
INSERT INTO settings (setting_key, setting_value, description) VALUES
('site_name', 'Population Dashboard', 'Name of the website'),
('items_per_page', '10', 'Number of items to show per page in tables'),
('allow_registration', 'true', 'Allow public user registration');

-- Create Database
CREATE DATABASE IF NOT EXISTS dashboard_db;
USE dashboard_db;

-- Create Users Table
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'user') DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_username (username),
    INDEX idx_role (role)
);

-- Create Population Data Table
CREATE TABLE pop_data (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    sex ENUM('Male', 'Female', 'LGBTQ') NOT NULL,
    barangay VARCHAR(50) NOT NULL,
    address VARCHAR(255) NOT NULL,
    contact VARCHAR(20),
    birthday DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    -- Indexes for frequently accessed columns
    INDEX idx_name (name),
    INDEX idx_age (age),
    INDEX idx_sex (sex),
    INDEX idx_barangay (barangay),
    INDEX idx_birthday (birthday),
    -- Composite indexes for common searches
    INDEX idx_name_age (name, age),
    INDEX idx_barangay_age (barangay, age),
    INDEX idx_generation_search (birthday, age, barangay)
);

-- Insert Default Admin User
INSERT INTO users (username, password, role) VALUES 
('admin', '$2y$10$YourHashedPasswordHere', 'admin');

-- Generation Query
CREATE VIEW generation_stats AS
SELECT 
    CASE 
        WHEN YEAR(birthday) BETWEEN 1997 AND 2012 THEN 'Gen_Z'
        WHEN YEAR(birthday) BETWEEN 1981 AND 1996 THEN 'Millennials'
        WHEN YEAR(birthday) BETWEEN 1965 AND 1980 THEN 'Gen_X'
        WHEN YEAR(birthday) BETWEEN 1946 AND 1964 THEN 'Boomers'
        WHEN YEAR(birthday) BETWEEN 1928 AND 1945 THEN 'Silent'
    END as generation,
    COUNT(*) as count
FROM pop_data
WHERE birthday IS NOT NULL
GROUP BY generation;

-- Age Group Query
CREATE VIEW age_group_stats AS
SELECT 
    CASE 
        WHEN age BETWEEN 18 AND 30 THEN '18-30'
        WHEN age BETWEEN 31 AND 50 THEN '31-50'
        WHEN age BETWEEN 51 AND 60 THEN '51-60'
    END as age_group,
    COUNT(*) as count
FROM pop_data
GROUP BY age_group;

-- Gender Distribution Query
CREATE VIEW gender_stats AS
SELECT sex, COUNT(*) as count
FROM pop_data
GROUP BY sex;

-- Barangay Distribution Query
CREATE VIEW barangay_stats AS
SELECT barangay, COUNT(*) as count
FROM pop_data
GROUP BY barangay;

-- Search Query with Index Usage
EXPLAIN SELECT * FROM pop_data 
WHERE name LIKE ? 
   OR address LIKE ? 
   OR barangay LIKE ?
ORDER BY name;

-- Birthday Statistics Query
CREATE VIEW birthday_stats AS
SELECT 
    COUNT(CASE WHEN DATE_FORMAT(birthday, '%m-%d') = DATE_FORMAT(CURDATE(), '%m-%d') THEN 1 END) as today_birthdays,
    COUNT(CASE WHEN MONTH(birthday) = MONTH(CURDATE()) THEN 1 END) as month_birthdays
FROM pop_data;

-- Stored Procedure for Age Updates
DELIMITER //
CREATE PROCEDURE update_ages()
BEGIN
    UPDATE pop_data 
    SET age = TIMESTAMPDIFF(YEAR, birthday, CURDATE());
END //
DELIMITER ;

-- Event for Automatic Age Updates
CREATE EVENT update_ages_event
ON SCHEDULE EVERY 1 DAY
DO CALL update_ages();

-- Triggers
DELIMITER //
CREATE TRIGGER before_insert_pop_data
BEFORE INSERT ON pop_data
FOR EACH ROW
BEGIN
    SET NEW.age = TIMESTAMPDIFF(YEAR, NEW.birthday, CURDATE());
END //

CREATE TRIGGER before_update_pop_data
BEFORE UPDATE ON pop_data
FOR EACH ROW
BEGIN
    IF NEW.birthday != OLD.birthday THEN
        SET NEW.age = TIMESTAMPDIFF(YEAR, NEW.birthday, CURDATE());
    END IF;
END //
DELIMITER ;
